# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: read fstab
  slurp:
    path: /etc/fstab
  register: nfs_client_fstab
  changed_when: false
  when: nfs_client_share != ''

- name: define whether or not fstab entries exist
  set_fact:
    nfs_client_mounts_present: '{{ nfs_client_mounts_present + [nfs_client_fstab.content | b64decode is regex("\b{}\b".format(item.key))] }}'
  with_dict: '{{ nfs_client_mounts }}'
  when: nfs_client_share != ''

- name: ensure subdirectories are present on nfs share
  block:
  - name: create temporary fstab
    tempfile:
      state: file
    register: nfs_client_temp_fstab
  - name: mount nfs share
    mount:
      fstab: '{{ nfs_client_temp_fstab.path }}'
      fstype: nfs
      path: /mnt
      src: '{{ nfs_client_share }}'
      state: mounted
  - name: make directories on nfs share
    file:
      path: '/mnt/{{ item.key.split(nfs_client_share)[1] }}'
      mode: 0755
      state: directory
    with_dict: '{{ nfs_client_mounts }}'
  always:
  - name: unmount nfs share
    mount:
      fstab: '{{ nfs_client_temp_fstab.path }}'
      fstype: nfs
      path: /mnt
      src: '{{ nfs_client_share }}'
      state: unmounted
  - name: remove temporary fstab
    file:
      path: '{{ nfs_client_temp_fstab.path }}'
      state: absent
  when:
  - nfs_client_share != ''
  - false in nfs_client_mounts_present

- name: ensure mount points exist
  file:
    path: '{{ item.value }}'
    state: directory
  with_dict: '{{ nfs_client_mounts }}'

- name: mount and persist nfs filesystems
  mount:
    path: '{{ item.value }}'
    fstype: nfs
    src: '{{ item.key }}'
    state: mounted
  with_dict: '{{ nfs_client_mounts }}'
