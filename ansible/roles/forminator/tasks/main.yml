---
- name: check if ssh key files are present
  stat:
    path: '{{ item }}'
  loop:
  - '{{ sap_ssh_priv_key }}'
  - '{{ sap_ssh_pub_key }}'
  register: stat_ssh_key_files
  changed_when: false

- name: define ssh key file existence
  set_fact:
    stat_ssh_key_files_exists: "{{ stat_ssh_key_files.results | map(attribute='stat') | map(attribute='exists') | list }}"

- block:
  - name: download ssh key files
    debug:
      msg: 'Download {{ item }} from bucket not yet implemented'
    loop:
    - '{{ sap_ssh_priv_key }}'
    - '{{ sap_ssh_pub_key }}'
  - name: ensure ssh key file directory is present
    file:
      path: '{{ sap_ssh_priv_key | dirname }}'
      mode: '0700'
      state: directory
  - name: clean up stale ssh key file
    file:
      path: '{{ item }}'
      state: absent
    loop:
    - '{{ sap_ssh_priv_key }}'
    - '{{ sap_ssh_pub_key }}'
    when: false in stat_ssh_key_files_exists and true in stat_ssh_key_files_exists
  - name: generate key files
    command: |
      ssh-keygen -t rsa -N '' -m pem -f {{ sap_ssh_priv_key }}
    args:
      creates: '{{ sap_ssh_priv_key }}'
  - name: store ssh key files
    debug:
      msg: 'Upload {{ item | basename }} to bucket not yet implemented'
    loop:
    - '{{ sap_ssh_priv_key }}'
    - '{{ sap_ssh_pub_key }}'
  - name: ensure correct permissions on ssh key files
    file:
      path: '{{ item.path }}'
      mode: '{{ item.mode }}'
    loop:
    - path: '{{ sap_ssh_priv_key }}'
      mode: '0600'
    - path: '{{ sap_ssh_pub_key }}'
      mode: '0644'
  when: false in stat_ssh_key_files_exists

- block:
  - name: create a tempdir for terraform variables
    tempfile:
      state: directory
    register: terraform_tempdir
    changed_when: false
  - name: write terraform variables to a file
    copy:
      dest: '{{ terraform_tempdir.path }}/vars.tf.json'
      content: '{{ sap_tf_variables_defaults | combine(sap_tf_variables) | to_json }}'
    changed_when: false
  - name: deploy infrastructure with terraform
    terraform:
      backend_config:
        bucket: '{{ sap_tf_state_bucket }}'
        prefix: '{{ sap_tf_state_bucket_prefix }}'
      force_init: true
      project_path: '{{ sap_tf_project_path }}'
      state: '{{ sap_state }}'
      variables_file: '{{ terraform_tempdir.path }}/vars.tf.json'
    register: terraform
  always:
  - name: clean up terraform directories
    file:
      path: '{{ item }}'
      state: absent
    changed_when: terraform is changed
    loop:
    - '{{ sap_tf_project_path }}/.terraform'
    - '{{ terraform_tempdir.path }}'

- name: flatten inventory map into a list of maps
  # Convert { "abc": ["10.10.10.10", "10.10.10.11"], "xyz": ["10.10.10.12"] } into:
  # [
  #   { "group": "abc", "host": "10.10.10.10" },
  #   { "group": "abc", "host": "10.10.10.11" },
  #   { "group": "xyz", "host": "10.10.10.12" }
  # ]
  set_fact:
    inventory_hosts: |
      {{ inventory_hosts | default([]) }} + {% set j = joiner(",") %}
        [{% for host in item.value %}{{ j() }}{ "group": "{{ item.key }}", "host": "{{ host }}" }{% endfor %}]
  with_dict: '{{ terraform.outputs.inventory.value }}'

- name: build inventory
  add_host:
    name: '{{ item.host }}'
    ansible_user: '{{ sap_ssh_user }}'
    ansible_ssh_private_key_file: '{{ sap_ssh_priv_key }}'
    terraform: '{{ terraform }}'
    groups: '{{ item.group }}'
  loop: '{{ inventory_hosts }}'
  changed_when: false

- name: wait for hosts
  command: >-
    ssh -i {{ sap_ssh_priv_key }} -o StrictHostKeyChecking=no
    {{ sap_ssh_user }}@{{ item.host }} exit
  register: can_ssh
  retries: 12
  delay: 10
  until: can_ssh is succeeded
  loop: '{{ inventory_hosts }}'
  changed_when: false
