---

- name: Verifying disks attached to system
  stat:
    path: "/dev/disk/by-id/google-{{ansible_hostname }}-{{ item.name }}"
  with_items: "{{ disks }}"
  register: diskpath

- name: Create disk dictionary
  set_fact:
    disksdict: "{{ disksdict | default({}) | combine( {item.item.partition_path: item.stat.lnk_source} ) }}"
  with_items: "{{ diskpath.results }}"

- debug:
    var: disksdict

- name: Create disk partitions
  parted:
    device: "{{ item.value }}"
    number: 1
    state: present
  with_items: "{{ disksdict|dict2items }}"
  tags:
    - disk_setup

- name: Create logical volume groups
  lvg:
    vg: "{{ item.key }}"
    pvs: "{{ item.value }}1"
    state: present
  with_items: "{{ disksdict|dict2items }}"
  tags:
    - disk_setup

- name: Create app logical volumes
  lvol:
    state: present
    vg: "{{ item.value.vol }}"
    lv: "{{ item.key }}"
    size: "{{ item.value.size }}"
    pvs: "{{ item.value.pvs | default(omit) }}"
  with_dict: "{{ logvols }}"
  tags:
    - disk_setup
  when: logvols is defined

- name: Create swap logical volumes
  lvol:
    state: present
    vg: "{{ item.value.vol }}"
    lv: "{{ item.key }}"
    size: "{{ item.value.size }}"
    pvs: "{{ item.value.pvs | default(omit) }}"
  with_dict: "{{ swapvols }}"
  tags:
    - disk_setup
  when: (swapon == True) and (swapvols is defined)

- name: Create filesystems
  filesystem:
    dev:  /dev/{{ item.value.vol}}/{{ item.key }}
    fstype: "{{ item.value.fstype | default('xfs')}}"
    force: no
    opts: "{{ item.value.opts | default(omit) }}"
  with_dict: "{{ logvols }}"
  ignore_errors: True
  tags:
    - disk_setup
  when: logvols is defined

- name: Mount and make fstab entries
  mount:
    name: "{{ item.value.mountpoint }}"
    fstype: "{{ item.value.fstype | default('xfs')}}"
    opts: defaults
    src: "/dev/{{ item.value.vol }}/{{ item.key }}"
    state: mounted
  with_dict: "{{ logvols }}"
  tags:
    - disk_setup
  when: logvols is defined

- name: Swap on
  block:
    - name: Check swapon
      shell: 'swapon -s | wc -l'
      register: swap_entry_count

    - name: swap entry in /etc/fstab
      lineinfile:
        path: "/etc/fstab"
        line: "swap none swap defaults,nofail 0 0"
      when: swap_entry_count.stdout == "0"
    
    - name: make swap 
      command: "mkswap /dev/{{ item.value.vol }}/{{ item.key }}"
      with_dict: "{{ swapvols }}"
      when: swap_entry_count.stdout == "0"

    - name: swap mount
      command: "swapon /dev/{{ item.value.vol }}/{{ item.key }}"
      with_dict: "{{ swapvols }}"
      when: swap_entry_count.stdout == "0"
  when: (swapon == True) and (swapvols is defined)

- name: "Configure exports"
  template:
    src: "nfs_exports.j2"
    dest: "/etc/exports"
    owner: "root"
    group: "root"
    mode: "0644"
  when: (nfs_mount == True) and (nfs_mount is defined)

#  when: nfs_mount == True

- name: reload nfsd
  command: "exportfs -r"
  when: (nfs_mount == True) and (nfs_mount is defined)
#  when: nfs_mount == True
- name: mount path creation
  file:
    path: "{{ item.value }}"
    state: directory
  with_dict: "{{ mountpa }}"  
#  loop: "{{ mountpa|dict2items }}"
  when: mountpa is defined

- name: Mounting NFS on clients
  mount:
    path: "{{ item.value }}"
    src: "{{ nfs_private_ip }}:{{ item.value }}"
    fstype: nfs
    state: mounted
  with_dict: "{{ mountpa }}"   
#  loop: "{{ mountpa|dict2items }}"
  when: mountpa is defined
