---
- block:
  - command: pcs property show maintenance-mode
    register: maintenance_mode_status
    changed_when: false

  - name: enable maintenance mode
    command: pcs property set maintenance-mode=true
    when: |
      'maintenance-mode: false' in maintenance_mode_status.stdout
  when: |
    ansible_os_family == 'RedHat'

- block:
  - command: crm configure get_property maintenance-mode
    register: maintenance_mode_status
    changed_when: false

  - name: enable maintenance mode
    command: crm configure property maintenance-mode=true
    when: |
      maintenance_mode_status.stdout == 'false'
  when: |
    ansible_os_family == 'Suse'

- block:
  - command: |
      pcs stonith show stonith_{{ sap_primary_instance }}
    register: stonith_primary_status
    changed_when: false
    failed_when: false

  - name: configure stonith for primary
    command: >-
      pcs stonith create stonith_{{ sap_primary_instance }} fence_gce zone={{ sap_primary_zone }}
      pcmk_host_map={{ sap_primary_instance }}:{{ sap_primary_instance }} power_timeout=240
      pcmk_reboot_timeout=480s pcmk_reboot_retries=4
    when: stonith_primary_status.rc != 0

  - command: |
      pcs stonith show stonith_{{ sap_secondary_instance }}
    register: stonith_secondary_status
    failed_when: false

  - name: configure stonith for secondary
    command: >-
      pcs stonith create stonith_{{ sap_secondary_instance }} fence_gce zone={{ sap_secondary_zone }}
      pcmk_host_map={{ sap_secondary_instance }}:{{ sap_secondary_instance }} power_timeout=240
      pcmk_reboot_timeout=480s pcmk_reboot_retries=4
    when: stonith_primary_status.rc != 0

  - name: set startup-fencing property
    command: pcs property set startup-fencing="true"

  - name: set stonith-enabled property
    command: pcs property set stonith-enabled="true"
  when: |
    ansible_os_family == 'RedHat'

- block:
  - name: configure stonith for primary
    command: >-
      crm configure primitive STONITH-{{ sap_primary_instance }} stonith:external/gcpstonith op monitor
      interval=300s timeout=60s on-fail=restart op start interval=0 timeout=60s onfail=restart
      params instance_name={{ sap_primary_instance }} gcloud_path="{{ sap_gcloud_path }}" logging=yes

  - name: configure stonith for secondary
    command: >-
      crm configure primitive STONITH-{{ sap_secondary_instance }} stonith:external/gcpstonith op monitor
      interval=300s timeout=60s on-fail=restart op start interval=0 timeout=60s onfail=restart
      params instance_name={{ sap_secondary_instance }} gcloud_path="{{ sap_gcloud_path }}" logging=yes

  - name: configure location stonith for primary
    command: >-
      crm configure location LOC_STONITH_{{ sap_primary_instance }} STONITH-{{ sap_primary_instance }}
      -inf: {{ sap_primary_instance }}

  - name: configure location stonith for secondary
    command: >-
      crm configure location LOC_STONITH_{{ sap_secondary_instance }} STONITH-{{ sap_secondary_instance }}
      -inf: {{ sap_secondary_instance }}
  when: |
    ansible_os_family == 'Suse'

- name: set resource defaults
  command: |
    pcs resource defaults {{ item }}
  loop:
  - default-resource-stickness=1000
  - default-migration-threshold=5000
  when: |
    ansible_os_family == 'RedHat'

# TODO: include application-specific tasks based on sap_application variable (e.g. hana, netweaver).

- block:
  - command: pcs property show maintenance-mode
    register: maintenance_mode_status
    changed_when: false

  - name: disable maintenance mode
    command: pcs property set maintenance-mode=false
    when: |
      'maintenance-mode: true' in maintenance_mode_status.stdout
  when: |
    ansible_os_family == 'RedHat'

- block:
  - command: crm configure get_property maintenance-mode
    register: maintenance_mode_status
    changed_when: false

  - name: disable maintenance mode
    command: crm configure property maintenance-mode=false
    when: |
      maintenance_mode_status.stdout == 'true'
  when: |
    ansible_os_family == 'Suse'
